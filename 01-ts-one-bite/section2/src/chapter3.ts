// 객체 리터럴 타입

// 1. 명목적 타입 시스템
// 대부분의 언어는 타입을 정의할 때 이름을 기준으로 한다.
// 그런데 아래의 경우 객체에 타입을 정의할 때 object를 사용하면 객체인 건 알지만 프로퍼티나 메서드에 접근하면 오류가 난다.

// 2. 구조적 타입 시스템(property based TS)
// 그래서 타입스크립트는 아래와 같이 객체의 구조를 기준으로 타입을 정의한다.
let user: {
  id?: number; // ?(옵셔널 프로퍼티)는 프로퍼티가 있어도 되고 없어도 된다는 뜻
  name: string;
} = {
  id: 1,
  name: 'ㅇㅇ',
};

let config: {
  readonly apiKey: string; // 값이 수정되면 안되는 경우엔 'readonly'키워드를 붙여주면 된다.
} = {
  apiKey: 'dddd',
};
